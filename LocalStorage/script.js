/*
  Объекты хранилища localStorage и sessionStorage предоставляют одинаковые методы и свойства:
    setItem(key, value) – сохранить пару ключ/значение.
    getItem(key) – получить данные по ключу key.
    removeItem(key) – удалить данные с ключом key.
    clear() – удалить всё.
    key(index) – получить ключ на заданной позиции.
    length – количество элементов в хранилище.

  localStorage
    Этот объект один на все вкладки и окна в рамках источника (один и тот же домен/протокол/порт).
    Данные не имеют срока давности, по которому истекают и удаляются. Сохраняются после перезапуска браузера и даже ОС.


  Обратите внимание, что ключ и значение должны быть строками.
  Если мы используем любой другой тип, например число или объект, то он автоматически преобразуется в строку:

 */
localStorage.setItem('test', 1);
console.log( localStorage.getItem('test') ); // 1

// установить значение для ключа
localStorage.test = 2;
// получить значение по ключу
console.log( localStorage.test ); // 2
// удалить ключ
// delete localStorage.test;


// Перебор ключей
for(let i=0; i<localStorage.length; i++) {
  let key = localStorage.key(i);
  console.log(`${key}: ${localStorage.getItem(key)}`);
}


/*
  sessionStorage

  Объект sessionStorage используется гораздо реже, чем localStorage.
  - sessionStorage существует только в рамках текущей вкладки браузера.
    - Другая вкладка с той же страницей будет иметь другое хранилище.
    - Но оно разделяется между ифреймами на той же вкладке (при условии, что они из одного и того же источника).
  - Данные продолжают существовать после перезагрузки страницы, но не после закрытия/открытия вкладки.

  Когда обновляются данные в localStorage или sessionStorage, генерируется событие storage со следующими свойствами:
    key – ключ, который обновился (null, если вызван .clear()).
    oldValue – старое значение (null, если ключ добавлен впервые).
    newValue – новое значение (null, если ключ был удалён).
    url – url документа, где произошло обновление.
    storageArea – объект localStorage или sessionStorage, где произошло обновление.

  Важно: событие срабатывает на всех остальных объектах window, где доступно хранилище, кроме того окна, которое его вызвало.


 */
